@import '../config';
@import '../functions';

.Nav {
    $navWidth: 100vw - goldenSplit(100vw);

    /*
     * The size of the settings button.
     * This should be a global, but since it uses a function it can't be in the config file without circular dependencies.
     *
     * (sass I'm looking at you.)
     */
    $settingsSize: goldenSplit(100vw, 8);
    
    /*
     * The distance between the settings button to the top and right.
     * Used to position the lines and the menu.
     */
    $offset: goldenSplit($navWidth, 3);

    /*
     * Same as the offset but used in other view modes.
     * The view and blog modes need more free space, so the offset is smaller.
     */
    $reducedOffset: goldenSplit($navWidth, 5);
    
    
    /*
     * The nav should be fixed at the right, and it's width should correspond to a golden split of the total windows width.
     * As it doesn't have a border, the golden split is more visible by the content width, but the nav width is still set for good measure.
     */
    display: block;
    position: fixed;
    z-index: layerMap(nav);

    top: 0;
    right: 0;

    width: $navWidth;
    height: 100vh;

    .Settings {
        display: inline-block;
        position: absolute;

        /* The settings button offset determines the position of the style lines and the menu. */
        top: $offset;
        right: $offset;

        /*
         * Acount for the line width as when you rotate an element, it's container doesn't scale to fit the border.
         * Web is weird.
         *
         * The width should be of the diagonal of a square of side $lineWidth, as it's rotated 45deg.
         */
        margin: $lineWidth * $sqrtTwo;

        
        @at-root.View .Settings {
            top: $reducedOffset;
            right: $reducedOffset;
        }
    }
    
    .NavMenu {
        position: relative;

        top: goldenSplit(100vh);

        /* Align the right of the menu with the center of the rotated settings button. */
        right: $offset + $settingsSize * $sqrtTwo / 2;
        /* Move back the bullet expansion width to line up the menu with the style line. */
        margin-right: - ($lineWidth * pow($phi, 2) - $lineWidth);

        @at-root.View .NavMenu {
            display: none;
        }
    }

    /*
     * Base class for the style lines on the nav.
     */
    .Line {
        display: inline-block;
        position: absolute;
    
        width: $lineWidth;
        /* Align the right of the menu with the center of the rotated settings button. */
        right: $offset + $settingsSize * $sqrtTwo / 2;
        
        background-color: colorMap(base);
    }
    
    .TopLine {
        @extend .Line;

        /* Align the top of the line with the bottom of the rotated settings button. */
        top: $offset + $settingsSize * $sqrtTwo;
        
        /*
         * The bottom property needs to know the size and position of the menu.
         * It can only be done (avoiding hacky solutions) with Javascript.
         * Has the value set as an inline style in Nav.jsx
         */

        /* Acount for the line width as when you rotate an element, it's container doesn't scale to fit the border. */
        margin-top: $lineWidth / 2;

        @at-root.View .TopLine {
            top: $reducedOffset + $settingsSize * $sqrtTwo;
            right: $reducedOffset + $settingsSize * $sqrtTwo / 2;
        }
    }

    .BottomLine {
        @extend .Line;
        /*
         * The top property needs to know the size and position of the menu.
         * It can only be done (avoiding hacky solutions) with Javascript.
         * Has the value set as an inline style in Nav.jsx
         */
        
        /* Make the bottom line extend to the bottom of the screen. */
        bottom: 0;

        @at-root.View .BottomLine {
            display: none;
        }
    }


}
