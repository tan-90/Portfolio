@import '../config';
@import '../functions';

.Contact {
    /*
     * Defines the spacing between input elements.
     *
     * It's just the bottom margin of the inputs.
     */
    $inputSpacing: goldenSplit(100vh, 7);

    /*
     * Defines the input field border width.
     *
     * The border used on the nav is a bit too thick, so we just golden split it.
     * It might be too thin now, but it probably won't matter when I make this responsive.
     */
     $borderWidth: goldenSplit($lineWidth);

    form {
        position: relative;
        display: flex;
        flex-direction: column;

        /*
         * Center everything that's inside the form.
         * This has to be done to allow centering the social bar, as it's size is unkown.
        */
        text-align: center;
    }

     /*
      * The inputs are childs of the labels (that's how react doc does it).
      * This means I only need a few tweaks on input styling.
      * So just style them all at the same time and adjusts when needed.
      */
    .Input {
        display: inline-block;
        position: relative;

        font-family: 'Abel', sans-serif;
        font-weight: 100;
        font-size: goldenSplit(100vh, 7);

        height: goldenSplit(100vh, 6);

        /*
         * Give the text a bit of spacing to the border.
         */
        padding-left: 5px;

        color: colorMap(base);
        /*
         * I want to see just the border.
         */
        background-color: colorMap(background);

        border: solid $borderWidth colorMap(base);

        /*
         * The focus outline is replaced with a highlight color border.
         */
        &:focus {
            /*
             * Can't really decide if I want to highlight the text on focus.
             * I think I like it, but this could change.
             */
            color: colorMap(highlight);
            
            border: solid $borderWidth colorMap(highlight);

            outline: none;
        }

        &:disabled {
            opacity: 0.5;
        }
    }

    /*
     * The textarea and button inputs need some tweaking.
     */
    .MessageTextarea {
        @extend .Input;

        /*
         * Override the height.
         */
        height: goldenSplit(100vh, 3);
        
        /*
         * Why is free resizing even a thing?
         */
        resize: none;
    }

    /*
     * The button and textarea inputs need some tweaking.
     */
    .SubmitButton {
        @extend .Input;
        
        width:  100% - goldenSplit(100%);

        /*
         * As this has a set width, it won't be centered just by the text align.
         * Auto margins on the left and right ensure it's centered.
         */
        margin-left: auto;
        margin-right: auto;

        margin-bottom: $inputSpacing;

        cursor: pointer;

        /*
         * Since the base class only covers focus, we need some hover feedback.
         */
        &:hover {
            color: colorMap(highlight);
            
            border: solid $borderWidth colorMap(highlight);
        }
    }

    /*
     * Despite being called Row, this is not a bootstrap like row.
     * It just holds the name and email fields, as they're on the same row.
     */
    .Row {
        display: flex;
        flex-direction: row;

        margin-bottom: $inputSpacing;
    }

    /*
     * The react docs put the labelled element inside of the label.
     * I'm following that, so the label class needs to position the label and the input.
     * Use flex to display them as a column.
     */
    %Label {
        display: flex;
        flex-direction: column;

        /*
         * Since I had to set text-align to center on the form so the social bar could be centered, I reset it here.
         */
        text-align: left;
        
        font-family: 'Abel', sans-serif;
        font-weight: 100;
        font-size: goldenSplit(100vh, 8);
        
        color: colorMap(base);
    }

    .NameLabel {
        @extend %Label;

        /*
         * You guessed it, I'm golden splitting the space for the name and email fields.
         */
        flex-grow: 1;

        /*
         * The margin is evenly divided between the two fields.
         * This is done mainly to keep the sizes as close to the golden ratio as possible.
         * It's not even noticeable, but allows me to draw Fibonacci spirals over my pages.
         */
        margin-right: goldenSplit(100vw, 10) / 2;
    }

    .EmailLabel {
        @extend %Label;
        
        /*
         * You guessed it, I'm golden splitting the space for the name and email fields.
         */
        flex-grow: $phi;
        
        /*
         * The margin is evenly divided between the two fields.
         * This is done mainly to keep the sizes as close to the golden ratio as possible.
         * It's not even noticeable, but allows me to draw Fibonacci spirals over my pages.
         */
        margin-left: goldenSplit(100vw, 10) / 2;
    }

    .MessageLabel {
        @extend %Label;

        margin-bottom: $inputSpacing;
    }

    /*
     * The container of the social bar.
     */
    .Social {
        text-align: center;
        margin-top: $inputSpacing * ($phi - 1);

        /*
         * Select the SocialIcon elements.
         * This feels wrong as we can't be sure the Social Icons will be divs, but I'm not aware of any other way that works with modularized css.
         * div ~ div ensures we only select the divs that are siblings of divs, avoiding an extra margin on the first icon.
         */
        & > div ~ div {
            margin-left: goldenSplit(100vw, 10);
        }
    }
}